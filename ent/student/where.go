// Code generated by ent, DO NOT EDIT.

package student

import (
	"school/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldUpdatedAt, v))
}

// Sort applies equality check predicate on the "sort" field. It's identical to SortEQ.
func Sort(v uint32) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldSort, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldStatus, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldName, v))
}

// IDCard applies equality check predicate on the "id_card" field. It's identical to IDCardEQ.
func IDCard(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldIDCard, v))
}

// ClassID applies equality check predicate on the "class_id" field. It's identical to ClassIDEQ.
func ClassID(v uint64) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldClassID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldUpdatedAt, v))
}

// SortEQ applies the EQ predicate on the "sort" field.
func SortEQ(v uint32) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldSort, v))
}

// SortNEQ applies the NEQ predicate on the "sort" field.
func SortNEQ(v uint32) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldSort, v))
}

// SortIn applies the In predicate on the "sort" field.
func SortIn(vs ...uint32) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldSort, vs...))
}

// SortNotIn applies the NotIn predicate on the "sort" field.
func SortNotIn(vs ...uint32) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldSort, vs...))
}

// SortGT applies the GT predicate on the "sort" field.
func SortGT(v uint32) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldSort, v))
}

// SortGTE applies the GTE predicate on the "sort" field.
func SortGTE(v uint32) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldSort, v))
}

// SortLT applies the LT predicate on the "sort" field.
func SortLT(v uint32) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldSort, v))
}

// SortLTE applies the LTE predicate on the "sort" field.
func SortLTE(v uint32) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldSort, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Student {
	return predicate.Student(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Student {
	return predicate.Student(sql.FieldNotNull(FieldStatus))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Student {
	return predicate.Student(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Student {
	return predicate.Student(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Student {
	return predicate.Student(sql.FieldContainsFold(FieldName, v))
}

// IDCardEQ applies the EQ predicate on the "id_card" field.
func IDCardEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldIDCard, v))
}

// IDCardNEQ applies the NEQ predicate on the "id_card" field.
func IDCardNEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldIDCard, v))
}

// IDCardIn applies the In predicate on the "id_card" field.
func IDCardIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldIDCard, vs...))
}

// IDCardNotIn applies the NotIn predicate on the "id_card" field.
func IDCardNotIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldIDCard, vs...))
}

// IDCardGT applies the GT predicate on the "id_card" field.
func IDCardGT(v string) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldIDCard, v))
}

// IDCardGTE applies the GTE predicate on the "id_card" field.
func IDCardGTE(v string) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldIDCard, v))
}

// IDCardLT applies the LT predicate on the "id_card" field.
func IDCardLT(v string) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldIDCard, v))
}

// IDCardLTE applies the LTE predicate on the "id_card" field.
func IDCardLTE(v string) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldIDCard, v))
}

// IDCardContains applies the Contains predicate on the "id_card" field.
func IDCardContains(v string) predicate.Student {
	return predicate.Student(sql.FieldContains(FieldIDCard, v))
}

// IDCardHasPrefix applies the HasPrefix predicate on the "id_card" field.
func IDCardHasPrefix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasPrefix(FieldIDCard, v))
}

// IDCardHasSuffix applies the HasSuffix predicate on the "id_card" field.
func IDCardHasSuffix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasSuffix(FieldIDCard, v))
}

// IDCardEqualFold applies the EqualFold predicate on the "id_card" field.
func IDCardEqualFold(v string) predicate.Student {
	return predicate.Student(sql.FieldEqualFold(FieldIDCard, v))
}

// IDCardContainsFold applies the ContainsFold predicate on the "id_card" field.
func IDCardContainsFold(v string) predicate.Student {
	return predicate.Student(sql.FieldContainsFold(FieldIDCard, v))
}

// ClassIDEQ applies the EQ predicate on the "class_id" field.
func ClassIDEQ(v uint64) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldClassID, v))
}

// ClassIDNEQ applies the NEQ predicate on the "class_id" field.
func ClassIDNEQ(v uint64) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldClassID, v))
}

// ClassIDIn applies the In predicate on the "class_id" field.
func ClassIDIn(vs ...uint64) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldClassID, vs...))
}

// ClassIDNotIn applies the NotIn predicate on the "class_id" field.
func ClassIDNotIn(vs ...uint64) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldClassID, vs...))
}

// ClassIDIsNil applies the IsNil predicate on the "class_id" field.
func ClassIDIsNil() predicate.Student {
	return predicate.Student(sql.FieldIsNull(FieldClassID))
}

// ClassIDNotNil applies the NotNil predicate on the "class_id" field.
func ClassIDNotNil() predicate.Student {
	return predicate.Student(sql.FieldNotNull(FieldClassID))
}

// HasClass applies the HasEdge predicate on the "class" edge.
func HasClass() predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClassTable, ClassColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClassWith applies the HasEdge predicate on the "class" edge with a given conditions (other predicates).
func HasClassWith(preds ...predicate.Class) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		step := newClassStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		p(s.Not())
	})
}
